// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

// Package logger is a generated GoMock package.
package logger

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockLogger) Debug(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", message)
}

// Debug indicates an expected call of Debug.
func (mr *MockLoggerMockRecorder) Debug(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockLogger)(nil).Debug), message)
}

// Log mocks base method.
func (m *MockLogger) Log(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Log", message)
}

// Log indicates an expected call of Log.
func (mr *MockLoggerMockRecorder) Log(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Log", reflect.TypeOf((*MockLogger)(nil).Log), message)
}

// Metrics mocks base method.
func (m *MockLogger) Metrics(metrics map[string]interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Metrics", metrics)
}

// Metrics indicates an expected call of Metrics.
func (mr *MockLoggerMockRecorder) Metrics(metrics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Metrics", reflect.TypeOf((*MockLogger)(nil).Metrics), metrics)
}

// Trace mocks base method.
func (m *MockLogger) Trace(message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Trace", message)
}

// Trace indicates an expected call of Trace.
func (mr *MockLoggerMockRecorder) Trace(message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trace", reflect.TypeOf((*MockLogger)(nil).Trace), message)
}
